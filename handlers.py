from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
# from kb import kb_client
# from database import sqlite_db
# from kb import client_kb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import sqlite3 as sq
from aiogram import Bot, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor


storage = MemoryStorage()

TOKEN = "6580626601:AAGp2kcs2HNyUqWVHB61nh_YzMnuUVxvpZs"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)


class FSMAdmin(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    #q5 = State()
    q6 = State()
    q66 = State()
    q7 = State()
    q8 = State()
    q9 = State()
    q10 = State()
    q11 = State()
    q12 = State()
    


async def start(message:types.Message):
    await bot.send_chat_action(chat_id=message.from_user.id, action=types.ChatActions.UPLOAD_VIDEO)
    with open("v1.mp4", "rb") as video_file:
        await bot.send_video_note(message.from_user.id, video_file)
    greeting = '''
            –ü—Ä–∏–≤–µ—Ç! ‚ù§Ô∏è
–ú–µ–Ω—è –∑–æ–≤—É—Ç <U>–ö—Å–µ–Ω–∏—è –°–∞–º–∞—Ä–∏–Ω–∞</U>, —è ‚Äî –∂–µ–Ω—Å–∫–∏–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ—É—á, –∏ —è –æ—á–µ–Ω—å —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª–∞ –º–Ω–µ –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –∏ –ø—Ä–æ–π—Ç–∏ —ç—Ç—É –ø—Ä–∞–∫—Ç–∏–∫—É –ø–æ–¥ –º–æ–∏–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º ü´∂üèª

<b>–î–ª—è —á–µ–≥–æ –æ–Ω–∞ –Ω—É–∂–Ω–∞?</b>

–ü—Ä–∞–∫—Ç–∏–∫–∞ –Ω–∞—Ü–µ–ª–µ–Ω–∞ –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥–ª–∞ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –º–∏—Ä –∏ –Ω–∞ —Å–µ–±—è –ø–æ–¥ –¥—Ä—É–≥–∏–º —É–≥–ª–æ–º. –¢—ã <b>–≤—Å–µ–≥–æ –∑–∞ 2-3 –º–∏–Ω—É—Ç—ã</b> —Å–º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏, –∫–æ–ø–Ω—É—Ç—å –ø–æ–≥–ª—É–±–∂–µ –∏ —á—ë—Ç–∫–æ –ø–æ–Ω—è—Ç—å, –∫–∞–∫–æ–π —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –∑–∞–ø—Ä–æ—Å –∫ —Å–∞–º–æ–π —Å–µ–±–µ.

–ü—Ä–∞–∫—Ç–∏–∫–∞ –±—É–¥–µ—Ç —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π, –Ω–æ —É–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ –ª—é–±–∞—è –¥–µ–≤—É—à–∫–∞ —Å–º–æ–∂–µ—Ç —Å –Ω–µ–π —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è! ü§ûüèº

<b>–í–∞–∂–Ω–æ!</b> –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è –Ω–∞ –ø–æ–ª–ø—É—Ç–∏. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç–∞–∫, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –±–æ–ª–µ–µ —è—Ä–∫–∏–º –∏ –ø–æ–ª–Ω—ã–º!
            '''
    await message.answer(text=greeting, parse_mode=types.ParseMode.HTML)
    await message.answer(text="–ù—É —á—Ç–æ, –ø–æ–µ—Ö–∞–ª–∏?", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="–î–∞! –ù–∞—á–∏–Ω–∞–µ–º!", callback_data="go")).add(InlineKeyboardButton(text="–ú–Ω–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ, —Å–ø–∞—Å–∏–±–æ", callback_data="no")))

async def rejection(callback_query:types.CallbackQuery):
    farewellMessage = '''
–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç—ã –Ω–µ —Ä–µ—à–∏–ª–∞—Å—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, –Ω–æ —è –±—É–¥—É –Ω–∞–¥–µ—è—Ç—å—Å—è, —á—Ç–æ –º–æ–π –±–ª–æ–≥ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ —Ç–∞–∫–∏–µ —Ç–µ–º—ã –∫–∞–∫ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ. –ü–æ–∫–∞ —Ç—ã –º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–µ–π –ø–∞–ø–∫–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö ‚Äú–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ—É—á–∏–Ω–≥‚Äù, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≤—Å—é –ø—Ä–∏—Ä–æ–¥—É —ç—Ç–æ–≥–æ –ø–æ–Ω—è—Ç–∏—è –∏ —á–µ–º –æ–Ω –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ. 

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É–¥–µ–ª–∏–ª–∞ –≤—Ä–µ–º—è!
–¢–≤–æ—è –ö—Å—é—à–∞

'''
    await callback_query.message.answer(text=farewellMessage)

async def next(callback_query:types.CallbackQuery):
    await callback_query.message.answer(text="–ï—Å–ª–∏ –±—ã –≤—ã –±—ã–ª–∏ —Ü–≤–µ—Ç–∫–æ–º, —Ç–æ –∫–∞–∫–∏–º?\n(–í–æ–ø—Ä–æ—Å: 1/9)")
    await FSMAdmin.q1.set()

async def cancel_handler(message: types.Message, state: FSMContext):
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞
    await message.reply("–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã.")

async def q1(message:types.Message, state:FSMContext):
    async with state.proxy() as data:
        data['q1'] = message.text
    await FSMAdmin.next() #–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ —ç—Ç–æ–º —Ü–≤–µ—Ç–∫–µ? –û–ø–∏—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏–ª–∏ —Ñ—Ä–∞–∑–∞–º–∏:
    await message.reply(text="–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ —ç—Ç–æ–º —Ü–≤–µ—Ç–∫–µ? –û–ø–∏—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏–ª–∏ —Ñ—Ä–∞–∑–∞–º–∏:\n(–í–æ–ø—Ä–æ—Å: 2/9)")


async def q2(message:types.Message, state:FSMContext):
    async with state.proxy() as data:
        data['q2'] = message.text
    await FSMAdmin.next()
   
    await message.reply(text="–ß—Ç–æ –≤–∞–º –≤ –Ω–µ–º –Ω—Ä–∞–≤–∏—Ç—Å—è <U>–ë–û–õ–¨–®–ï</U> –≤—Å–µ–≥–æ? <b>1 —ç–ª–µ–º–µ–Ω—Ç</b>, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∂–µ –≥–æ—Ç–æ–≤—ã –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ —Ü–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ü–≤–µ—Ç–æ–∫?\n(–í–æ–ø—Ä–æ—Å: 3/9)", parse_mode=types.ParseMode.HTML)
    
async def q3(message:types.Message, state:FSMContext):
    async with state.proxy() as data:
        data['q3'] = message.text
    await FSMAdmin.next()
    await message.reply(text="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å, –ø–æ—á–µ–º—É —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç?\n(–í–æ–ø—Ä–æ—Å: 4/9)")

async def q4(message:types.Message, state:FSMContext):
    async with state.proxy() as data:
        data['q4'] = message.text
    await FSMAdmin.next()
    #–¢—É—Ç –±—É–¥–µ—Ç –∫—Ä—É–∂–æ–∫
    await bot.send_chat_action(chat_id=message.from_user.id, action=types.ChatActions.UPLOAD_VIDEO)
    with open("v2.mp4", "rb") as video_file:
        await bot.send_video_note(message.from_user.id, video_file)
    await message.reply(text="–ï—Å–ª–∏ —Ç–æ, —á—Ç–æ —Ü–µ–Ω–Ω–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –≤–∞—Å, —Ç–æ –∫–∞–∫ —ç—Ç–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –≤–∞—Å?\n(–í–æ–ø—Ä–æ—Å: 5/9)")



async def q6(message:types.Message, state:FSMContext):
    async with state.proxy() as data:
        data['q6'] = message.text
    await FSMAdmin.next()
    await message.reply(text="–ù–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –≤ –≤–∞—Å –ø—Ä–æ—è–≤–ª–µ–Ω–æ —Å–µ–π—á–∞—Å?\n(–í–æ–ø—Ä–æ—Å: 6/9)", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="1-10%", callback_data="1-10%")).add(InlineKeyboardButton(text="10-30%", callback_data="10-30%")).add(InlineKeyboardButton(text="30-50%", callback_data="30-50%")).add(InlineKeyboardButton(text="50-70%", callback_data="50-70%")).add(InlineKeyboardButton(text="70-90%", callback_data="70-90%")).add(InlineKeyboardButton(text="90-100%", callback_data="90-100%")))

async def q66(callback_query:types.CallbackQuery, state:FSMContext):
    async with state.proxy() as data:
        data['q66'] = callback_query.data
    await FSMAdmin.next()
    await callback_query.message.reply(text="–•–æ—Ç–µ–ª–æ—Å—å –±—ã —É—Å–∏–ª–∏—Ç—å —ç—Ç–æ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ?", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="–î–∞", callback_data="–î–∞")).add(InlineKeyboardButton(text="–ù–µ—Ç", callback_data="–ù–µ—Ç")))

async def q7(callback_query:types.CallbackQuery, state:FSMContext):
    async with state.proxy() as data:
        data['q7'] = callback_query.data
    await FSMAdmin.next()
    await bot.send_chat_action(chat_id=callback_query.from_user.id, action=types.ChatActions.UPLOAD_VIDEO)
    with open("v3.mp4", "rb") as video_file:
        await bot.send_video_note(callback_query.from_user.id, video_file)
    await callback_query.message.answer(text="–ß—Ç–æ —É–∑–Ω–∞–ª–∏ –æ —Å–µ–±–µ –∑–∞ —ç—Ç–∏ 2-3 –º–∏–Ω—É—Ç—ã?üí´\n(–í–æ–ø—Ä–æ—Å: 7/9)")


async def q8(message:types.Message, state:FSMContext):
    async with state.proxy() as data:
        data['q8'] = message.text
    await FSMAdmin.next()
    #–¢—É—Ç –±—É–¥–µ—Ç –∫—Ä—É–∂–æ–∫
    
    await message.answer(text="–ö–∞–∫ —ç—Ç–æ –∑–Ω–∞–Ω–∏–µ <b>–û –°–ï–ë–ï</b> –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç –≤–∞—Å –∫ –≤–∞—à–µ–π —Ü–µ–ª–∏/–∂–µ–ª–∞–Ω–∏—é?\n(–í–æ–ø—Ä–æ—Å: 8/9)", parse_mode=types.ParseMode.HTML)


async def q9(message:types.Message, state:FSMContext):
    async with state.proxy() as data:
        data['q9'] = message.text
    await FSMAdmin.next()
    
    await message.reply(text="–ß—Ç–æ –≥–æ—Ç–æ–≤—ã —Å —ç—Ç–∏–º <b>–°–î–ï–õ–ê–¢–¨</b> —É–∂–µ —Å–µ–π—á–∞—Å? –ö–∞–∫ –Ω–∞–º–µ—Ä–µ–Ω—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å?\n(–í–æ–ø—Ä–æ—Å: 9/9)", parse_mode=types.ParseMode.HTML)


# async def q10(message:types.Message, state:FSMContext):
#     async with state.proxy() as data:
#         data['q10'] = message.text
#     await FSMAdmin.next()
#     #–¢—É—Ç –±—É–¥–µ—Ç –∫—Ä—É–∂–æ–∫
#     await message.reply(text="–ß—Ç–æ –≥–æ—Ç–æ–≤—ã —Å —ç—Ç–∏–º –°–î–ï–õ–ê–¢–¨ —É–∂–µ —Å–µ–π—á–∞—Å? –ö–∞–∫ –Ω–∞–º–µ—Ä–µ–Ω—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å?")

async def q11(callback_query: types.CallbackQuery, state:FSMContext):
    good = '–û—Å—Ç–∞–≤–ª—è–π <b>—Å–≤–æ–π –Ω–∏–∫ –≤ instagram</b> –≤ –æ–∫–æ—à–∫–µ, –∏ —è –¥–æ–±–∞–≤–ª—é —Ç–µ–±—è –≤ "–ª—É—á—à–∏–µ –¥—Ä—É–∑—å—è" –≤ —Å—Ç–æ—Ä–∏—Å, –∏ –∏–º–µ–Ω–Ω–æ —Ç–∞–º –±—É–¥—É –ø–æ—Å—Ç–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –¥–æ—à—ë–ª –¥–æ —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞ –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–πüí•\n\n‚ùóÔ∏è <b>–§–æ—Ä–º–∞—Ç</b>: —Å—Å—ã–ª–∫–æ–π –∏–ª–∏ —á–µ—Ä–µ–∑ @ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–π –Ω–∏–∫: @samarina_ksenya)'
    notGood = '–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç—ã –Ω–µ —Ä–µ—à–∏–ª–∞—Å—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, –Ω–æ —è –±—É–¥—É –Ω–∞–¥–µ—è—Ç—å—Å—è, —á—Ç–æ –º–æ–π –±–ª–æ–≥ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ —Ç–∞–∫–∏–µ —Ç–µ–º—ã –∫–∞–∫ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ.\n\n–ü–æ–∫–∞ —Ç—ã –º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è <b>—Å –º–æ–∏–º –≤–∏–¥–µ–æ "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ—É—á–∏–Ω–≥"</b>, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≤—Å—é –ø—Ä–∏—Ä–æ–¥—É —ç—Ç–æ–≥–æ –ø–æ–Ω—è—Ç–∏—è –∏ —á–µ–º –æ–Ω –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ üíå\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É–¥–µ–ª–∏–ª–∞ –≤—Ä–µ–º—è! üíû\n–¢–≤–æ—è –ö—Å—é—à–∞'
    if callback_query.data == "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ":
        await bot.send_message(chat_id=callback_query.from_user.id, text=notGood, parse_mode=types.ParseMode.HTML)
        user = '@' + str(callback_query.from_user.username) + '\n'
        if user == None:
            user = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª —Å–≤–æ–π –Ω–∏–∫\n"
        reply = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –∏–Ω—Å—Ç–∞–≥—Ä–∞–º"
        contact = f'–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{user} {reply}\n'
        async with state.proxy() as data:
            data['q11'] = contact
        await state.finish()
        await bot.send_message(chat_id=callback_query.from_user.id, text="–°–ø–∞—Å–∏–±–æ! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ –º–æ—ë–º –±–ª–æ–≥–µ!")
        print(list(data.values()))
        await sql_write(callback_query.from_user.id, list(data.values()))
    else:
        await bot.send_message(chat_id=callback_query.from_user.id, text=good,parse_mode=types.ParseMode.HTML)
        await FSMAdmin.next()


async def q12(message: types.Message, state:FSMContext):
    user = '@' + str(message.from_user.username) + '\n'
    if user == None:
        user = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª —Å–≤–æ–π –Ω–∏–∫\n"
    reply = message.text
    contact = f'–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{user} {reply}\n'
    async with state.proxy() as data:
        data['q11'] = contact
        
    
    await state.finish()
    await bot.send_message(chat_id=message.from_user.id, text="–°–ø–∞—Å–∏–±–æ! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ –º–æ—ë–º –±–ª–æ–≥–µ!")
    print(list(data.values()))
    await sql_write(message.from_user.id, list(data.values()))



async def q10(message:types.Message, state:FSMContext):
    async with state.proxy() as data:
        data['q10'] = message.text
    await FSMAdmin.next()
    #–¢—É—Ç –±—É–¥–µ—Ç –∫—Ä—É–∂–æ–∫
    await bot.send_chat_action(chat_id=message.from_user.id, action=types.ChatActions.UPLOAD_VIDEO)
    with open("v4.mp4", "rb") as video_file:
        await bot.send_video_note(message.from_user.id, video_file)
    final = f'{message.from_user.first_name}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª–∞—Å—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –º–æ–µ–π –Ω–µ–±–æ–ª—å—à–æ–π –∞–≤–∞–Ω—Ç—é—Ä–µ –∏ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∞ —Å–≤–æ—ë –≤—Ä–µ–º—è!‚ù£Ô∏è\n\n–ù–∞–¥–µ—é—Å—å, —á—Ç–æ —Ç—ã —Å–º–æ–≥–ª–∞ –ø–æ–¥—á–µ—Ä–ø–Ω—É—Ç—å –¥–ª—è —Å–µ–±—è —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∞ –Ω–∞ —Å–µ–±—è/—Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥ –¥—Ä—É–≥–∏–º —É–≥–ª–æ–º.\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —Å–¥–µ–ª–∞–ª–∞ <b>–ø–µ—Ä–≤—ã–π —à–∞–≥</b> <span class="tg-spoiler">(–∞ –æ–Ω –≤—Å–µ–≥–¥–∞ —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –∏ —Å–ª–æ–∂–Ω—ã–π)</span> –∫ –ø–æ–∏—Å–∫—É –Ω–∞—Å—Ç–æ—è—â–µ–π —Å–µ–±—è!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è üëâüèº <a href="https://instagram.com/samarina_ksenya?igshid=MzRlODBiNWFlZA=="><b style="color: blue;">–∫–æ –º–Ω–µ –≤ —Å—Ç–æ—Ä–∏—Å</b></a> üëàüèº –∏ —Å–º–æ—Ç—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä —ç—Ç–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏'
    await bot.send_message(chat_id=message.from_user.id, text=final, parse_mode=types.ParseMode.HTML)
    await bot.send_message(chat_id= message.from_user.id, text="–•–æ—Ç–µ–ª–∞ –±—ã —Ç—ã –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –º–µ–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —ç–∫—Å–ø—Ä–µ—Å—Å –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–∞–∑ –≤ 1-2 –Ω–µ–¥–µ–ª–∏? üòè", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="–î–∞, –±—ã–ª–æ –±—ã –∫—Ä—É—Ç–æ!",callback_data="–î–∞, –±—ã–ª–æ –±—ã –∫—Ä—É—Ç–æ!")).add(InlineKeyboardButton(text="–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data="–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ")))
IDADMIN = [293457853, 182390082, 1313463136]
async def admin(message:types.Message):
    if message.from_user.id in IDADMIN:
        await message.answer(text='–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ –±–æ—Ç–∞', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã")))
async def check(message:types.Message):
    if message.from_user.id in IDADMIN:
        res = await sql_read()
        for i in res:
            await message.answer(text=i[1], parse_mode=types.ParseMode.HTML)
def sql_start():
    global base, cur
    base = sq.connect('survey.db')
    cur = base.cursor()
    if base:
        print("Data base connected OK!")
    base.execute('CREATE TABLE IF NOT EXISTS answers(user TEXT, description TEXT)')
    base.commit()

async def sql_write(us, data):
    values_list = data
    my_string = '\n'.join(values_list)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT ON CONFLICT REPLACE –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏
    cur.execute('INSERT INTO answers (user, description) VALUES (?, ?)', (us, my_string))
    base.commit()


async def sql_read():
    cur.execute('SELECT * FROM answers')
    rows = cur.fetchall()
    return rows



def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start, commands = ['start'])
    dp.register_message_handler(cancel_handler, commands = ['cancel'], state="*")
    dp.register_callback_query_handler(rejection, text="no")
    dp.register_callback_query_handler(next, text="go")
    dp.register_message_handler(q1, state=FSMAdmin.q1)
    dp.register_message_handler(q2, state=FSMAdmin.q2)
    dp.register_message_handler(q3, state=FSMAdmin.q3)
    dp.register_message_handler(q4, state=FSMAdmin.q4)
    #dp.register_message_handler(q5, state=FSMAdmin.q5)
    dp.register_message_handler(q6, state=FSMAdmin.q6)
    dp.register_callback_query_handler(q66, state=FSMAdmin.q66)
    dp.register_callback_query_handler(q7, state=FSMAdmin.q7)
    dp.register_message_handler(q8, state=FSMAdmin.q8)
    dp.register_message_handler(q9, state=FSMAdmin.q9)
    dp.register_message_handler(q10, state=FSMAdmin.q10)
    dp.register_callback_query_handler(q11, state=FSMAdmin.q11)
    dp.register_message_handler(q12, state=FSMAdmin.q12)
    dp.register_message_handler(admin, commands = ['admin'])
    dp.register_message_handler(check, text = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã")

async def on_startup(_):
    print("–ë–æ—Ç –≤—ã—à–µ–ª –Ω–∞ —Å–≤—è–∑—å")
    sql_start()

register_handlers(dp)



executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
